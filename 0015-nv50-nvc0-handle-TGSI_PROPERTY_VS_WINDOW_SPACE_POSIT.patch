From 867f968c072318a3bbc9c520b8fda4e14a7a385f Mon Sep 17 00:00:00 2001
From: Christoph Bumiller <christoph.bumiller@speed.at>
Date: Mon, 27 May 2013 14:23:55 +0200
Subject: [PATCH 15/34] nv50,nvc0: handle
 TGSI_PROPERTY_VS_WINDOW_SPACE_POSITION

Allow viewport bypass used by D3D9 applications.
---
 .../drivers/nouveau/codegen/nv50_ir_driver.h       |  1 +
 .../drivers/nouveau/codegen/nv50_ir_from_tgsi.cpp  |  3 ++
 src/gallium/drivers/nouveau/nv50/nv50_context.h    |  2 ++
 src/gallium/drivers/nouveau/nv50/nv50_program.c    |  3 ++
 src/gallium/drivers/nouveau/nv50/nv50_program.h    |  1 +
 .../drivers/nouveau/nv50/nv50_shader_state.c       | 11 +++++++
 .../drivers/nouveau/nv50/nv50_state_validate.c     | 31 +++++++++++---------
 src/gallium/drivers/nouveau/nvc0/nvc0_context.h    |  2 ++
 src/gallium/drivers/nouveau/nvc0/nvc0_program.c    |  1 +
 src/gallium/drivers/nouveau/nvc0/nvc0_program.h    |  1 +
 .../drivers/nouveau/nvc0/nvc0_shader_state.c       |  6 ++++
 .../drivers/nouveau/nvc0/nvc0_state_validate.c     | 34 +++++++++++++---------
 src/gallium/drivers/nouveau/nvc0/nvc0_surface.c    |  3 +-
 13 files changed, 72 insertions(+), 27 deletions(-)

diff --git a/src/gallium/drivers/nouveau/codegen/nv50_ir_driver.h b/src/gallium/drivers/nouveau/codegen/nv50_ir_driver.h
index 4e8dd34..9490037 100644
--- a/src/gallium/drivers/nouveau/codegen/nv50_ir_driver.h
+++ b/src/gallium/drivers/nouveau/codegen/nv50_ir_driver.h
@@ -134,6 +134,7 @@ struct nv50_ir_prog_info
    union {
       struct {
          uint32_t inputMask[4]; /* mask of attributes read (1 bit per scalar) */
+         boolean vportBypass;
       } vp;
       struct {
          uint8_t inputPatchSize;
diff --git a/src/gallium/drivers/nouveau/codegen/nv50_ir_from_tgsi.cpp b/src/gallium/drivers/nouveau/codegen/nv50_ir_from_tgsi.cpp
index 230938b..1e72b9d 100644
--- a/src/gallium/drivers/nouveau/codegen/nv50_ir_from_tgsi.cpp
+++ b/src/gallium/drivers/nouveau/codegen/nv50_ir_from_tgsi.cpp
@@ -882,6 +882,9 @@ void Source::scanProperty(const struct tgsi_full_property *prop)
    case TGSI_PROPERTY_VS_PROHIBIT_UCPS:
       info->io.genUserClip = -1;
       break;
+   case TGSI_PROPERTY_VS_WINDOW_SPACE_POSITION:
+      info->prop.vp.vportBypass = !!prop->u[0].Data;
+      break;
    default:
       INFO("unhandled TGSI property %d\n", prop->Property.PropertyName);
       break;
diff --git a/src/gallium/drivers/nouveau/nv50/nv50_context.h b/src/gallium/drivers/nouveau/nv50/nv50_context.h
index 45eb554..047e089 100644
--- a/src/gallium/drivers/nouveau/nv50/nv50_context.h
+++ b/src/gallium/drivers/nouveau/nv50/nv50_context.h
@@ -248,6 +248,8 @@ extern void nv50_init_state_functions(struct nv50_context *);
 
 /* nv50_state_validate.c */
 /* @words: check for space before emitting relocs */
+void nv50_validate_viewport(struct nv50_context *);
+void nv50_validate_scissor(struct nv50_context *);
 extern boolean nv50_state_validate(struct nv50_context *, uint32_t state_mask,
                                    unsigned space_words);
 
diff --git a/src/gallium/drivers/nouveau/nv50/nv50_program.c b/src/gallium/drivers/nouveau/nv50/nv50_program.c
index fead2e7..66ec29d 100644
--- a/src/gallium/drivers/nouveau/nv50/nv50_program.c
+++ b/src/gallium/drivers/nouveau/nv50/nv50_program.c
@@ -384,6 +384,9 @@ nv50_program_translate(struct nv50_program *prog, uint16_t chipset)
       if (info->prop.fp.usesDiscard)
          prog->fp.flags[0] |= NV50_3D_FP_CONTROL_USES_KIL;
    } else
+   if (prog->type == PIPE_SHADER_VERTEX) {
+      prog->vp.vport_bypass = info->prop.vp.vportBypass;
+   } else
    if (prog->type == PIPE_SHADER_GEOMETRY) {
       switch (info->prop.gp.outputPrim) {
       case PIPE_PRIM_LINE_STRIP:
diff --git a/src/gallium/drivers/nouveau/nv50/nv50_program.h b/src/gallium/drivers/nouveau/nv50/nv50_program.h
index fe6bd60..0635744 100644
--- a/src/gallium/drivers/nouveau/nv50/nv50_program.h
+++ b/src/gallium/drivers/nouveau/nv50/nv50_program.h
@@ -78,6 +78,7 @@ struct nv50_program {
       ubyte edgeflag;
       ubyte clpd[2];     /* output slot of clip distance[i]'s 1st component */
       ubyte clpd_nr;
+      boolean vport_bypass;
    } vp;
 
    struct {
diff --git a/src/gallium/drivers/nouveau/nv50/nv50_shader_state.c b/src/gallium/drivers/nouveau/nv50/nv50_shader_state.c
index c698782..0a54bdd 100644
--- a/src/gallium/drivers/nouveau/nv50/nv50_shader_state.c
+++ b/src/gallium/drivers/nouveau/nv50/nv50_shader_state.c
@@ -164,6 +164,17 @@ nv50_vertprog_validate(struct nv50_context *nv50)
    PUSH_DATA (push, vp->max_gpr);
    BEGIN_NV04(push, NV50_3D(VP_START_ID), 1);
    PUSH_DATA (push, vp->code_base);
+
+   if (unlikely(nv50->state.vport_bypass != vp->vp.vport_bypass)) {
+      nv50->state.vport_bypass = vp->vp.vport_bypass;
+      BEGIN_NV04(push, NV50_3D(VIEWPORT_TRANSFORM_EN), 1);
+      PUSH_DATA (push, !vp->vp.vport_bypass);
+      /* TODO: don't do these twice if the vport changed, too: */
+      nv50_validate_viewport(nv50);
+#ifdef NV50_SCISSORS_CLIPPING
+      nv50_validate_scissor(nv50);
+#endif
+   }
 }
 
 void
diff --git a/src/gallium/drivers/nouveau/nv50/nv50_state_validate.c b/src/gallium/drivers/nouveau/nv50/nv50_state_validate.c
index 4cdaa9a..7eb724c 100644
--- a/src/gallium/drivers/nouveau/nv50/nv50_state_validate.c
+++ b/src/gallium/drivers/nouveau/nv50/nv50_state_validate.c
@@ -193,7 +193,7 @@ nv50_validate_stipple(struct nv50_context *nv50)
       PUSH_DATA(push, util_bswap32(nv50->stipple.stipple[i]));
 }
 
-static void
+void
 nv50_validate_scissor(struct nv50_context *nv50)
 {
    struct nouveau_pushbuf *push = nv50->base.pushbuf;
@@ -256,7 +256,7 @@ nv50_validate_scissor(struct nv50_context *nv50)
    nv50->scissors_dirty = 0;
 }
 
-static void
+void
 nv50_validate_viewport(struct nv50_context *nv50)
 {
    struct nouveau_pushbuf *push = nv50->base.pushbuf;
@@ -269,17 +269,22 @@ nv50_validate_viewport(struct nv50_context *nv50)
       if (!(nv50->viewports_dirty & (1 << i)))
          continue;
 
-      BEGIN_NV04(push, NV50_3D(VIEWPORT_TRANSLATE_X(i)), 3);
-      PUSH_DATAf(push, vpt->translate[0]);
-      PUSH_DATAf(push, vpt->translate[1]);
-      PUSH_DATAf(push, vpt->translate[2]);
-      BEGIN_NV04(push, NV50_3D(VIEWPORT_SCALE_X(i)), 3);
-      PUSH_DATAf(push, vpt->scale[0]);
-      PUSH_DATAf(push, vpt->scale[1]);
-      PUSH_DATAf(push, vpt->scale[2]);
-
-      zmin = vpt->translate[2] - fabsf(vpt->scale[2]);
-      zmax = vpt->translate[2] + fabsf(vpt->scale[2]);
+      if (!nv50->state.vport_bypass) {
+         BEGIN_NV04(push, NV50_3D(VIEWPORT_TRANSLATE_X(i)), 3);
+         PUSH_DATAf(push, vpt->translate[0]);
+         PUSH_DATAf(push, vpt->translate[1]);
+         PUSH_DATAf(push, vpt->translate[2]);
+         BEGIN_NV04(push, NV50_3D(VIEWPORT_SCALE_X(i)), 3);
+         PUSH_DATAf(push, vpt->scale[0]);
+         PUSH_DATAf(push, vpt->scale[1]);
+         PUSH_DATAf(push, vpt->scale[2]);
+
+         zmin = vpt->translate[2] - fabsf(vpt->scale[2]);
+         zmax = vpt->translate[2] + fabsf(vpt->scale[2]);
+      } else {
+         zmin = 0.0f;
+         zmax = 1.0f;
+      }
 
 #ifdef NV50_SCISSORS_CLIPPING
       BEGIN_NV04(push, NV50_3D(DEPTH_RANGE_NEAR(i)), 2);
diff --git a/src/gallium/drivers/nouveau/nvc0/nvc0_context.h b/src/gallium/drivers/nouveau/nvc0/nvc0_context.h
index c30094f..a1e2d2f 100644
--- a/src/gallium/drivers/nouveau/nvc0/nvc0_context.h
+++ b/src/gallium/drivers/nouveau/nvc0/nvc0_context.h
@@ -118,6 +118,7 @@ struct nvc0_context {
       boolean rasterizer_discard;
       boolean early_z_forced;
       boolean prim_restart;
+      boolean vport_bypass;
       uint32_t instance_elts; /* bitmask of per-instance elements */
       uint32_t instance_base;
       uint32_t constant_vbos;
@@ -271,6 +272,7 @@ void nvc0_tfb_validate(struct nvc0_context *);
 extern void nvc0_init_state_functions(struct nvc0_context *);
 
 /* nvc0_state_validate.c */
+void nvc0_validate_viewport(struct nvc0_context *);
 void nvc0_validate_global_residents(struct nvc0_context *,
                                     struct nouveau_bufctx *, int bin);
 extern boolean nvc0_state_validate(struct nvc0_context *, uint32_t state_mask,
diff --git a/src/gallium/drivers/nouveau/nvc0/nvc0_program.c b/src/gallium/drivers/nouveau/nvc0/nvc0_program.c
index bcfaf04..5ced27f 100644
--- a/src/gallium/drivers/nouveau/nvc0/nvc0_program.c
+++ b/src/gallium/drivers/nouveau/nvc0/nvc0_program.c
@@ -597,6 +597,7 @@ nvc0_program_translate(struct nvc0_program *prog, uint16_t chipset)
 
    switch (prog->type) {
    case PIPE_SHADER_VERTEX:
+      prog->vp.vport_bypass = info->prop.vp.vportBypass;
       ret = nvc0_vp_gen_header(prog, info);
       break;
 #ifdef PIPE_SHADER_HULL
diff --git a/src/gallium/drivers/nouveau/nvc0/nvc0_program.h b/src/gallium/drivers/nouveau/nvc0/nvc0_program.h
index 8a1b45f..5a771d9 100644
--- a/src/gallium/drivers/nouveau/nvc0/nvc0_program.h
+++ b/src/gallium/drivers/nouveau/nvc0/nvc0_program.h
@@ -42,6 +42,7 @@ struct nvc0_program {
       uint8_t num_ucps; /* also set to max if ClipDistance is used */
       uint8_t edgeflag; /* attribute index of edgeflag input */
       boolean need_vertex_id;
+      boolean vport_bypass;
    } vp;
    struct {
       uint8_t early_z;
diff --git a/src/gallium/drivers/nouveau/nvc0/nvc0_shader_state.c b/src/gallium/drivers/nouveau/nvc0/nvc0_shader_state.c
index 1000d82..8210957 100644
--- a/src/gallium/drivers/nouveau/nvc0/nvc0_shader_state.c
+++ b/src/gallium/drivers/nouveau/nvc0/nvc0_shader_state.c
@@ -99,6 +99,12 @@ nvc0_vertprog_validate(struct nvc0_context *nvc0)
 
    // BEGIN_NVC0(push, NVC0_3D_(0x163c), 1);
    // PUSH_DATA (push, 0);
+
+   if (nvc0->state.vport_bypass != vp->vp.vport_bypass) {
+      nvc0->state.vport_bypass = vp->vp.vport_bypass;
+      IMMED_NVC0(push, NVC0_3D(VIEWPORT_TRANSFORM_EN), !vp->vp.vport_bypass);
+      nvc0_validate_viewport(nvc0); /* TODO: don't do this twice */
+   }
 }
 
 void
diff --git a/src/gallium/drivers/nouveau/nvc0/nvc0_state_validate.c b/src/gallium/drivers/nouveau/nvc0/nvc0_state_validate.c
index 09d1bd4..6c6afee 100644
--- a/src/gallium/drivers/nouveau/nvc0/nvc0_state_validate.c
+++ b/src/gallium/drivers/nouveau/nvc0/nvc0_state_validate.c
@@ -304,7 +304,7 @@ nvc0_validate_scissor(struct nvc0_context *nvc0)
    nvc0->scissors_dirty = 0;
 }
 
-static void
+void
 nvc0_validate_viewport(struct nvc0_context *nvc0)
 {
    struct nouveau_pushbuf *push = nvc0->base.pushbuf;
@@ -329,21 +329,29 @@ nvc0_validate_viewport(struct nvc0_context *nvc0)
 
       /* now set the viewport rectangle to viewport dimensions for clipping */
 
-      x = util_iround(MAX2(0.0f, vp->translate[0] - fabsf(vp->scale[0])));
-      y = util_iround(MAX2(0.0f, vp->translate[1] - fabsf(vp->scale[1])));
-      w = util_iround(vp->translate[0] + fabsf(vp->scale[0])) - x;
-      h = util_iround(vp->translate[1] + fabsf(vp->scale[1])) - y;
+      if (likely(!nvc0->state.vport_bypass)) {
+          x = util_iround(MAX2(0.0f, vp->translate[0] - fabsf(vp->scale[0])));
+          y = util_iround(MAX2(0.0f, vp->translate[1] - fabsf(vp->scale[1])));
+          w = util_iround(vp->translate[0] + fabsf(vp->scale[0])) - x;
+          h = util_iround(vp->translate[1] + fabsf(vp->scale[1])) - y;
 
-      BEGIN_NVC0(push, NVC0_3D(VIEWPORT_HORIZ(i)), 2);
-      PUSH_DATA (push, (w << 16) | x);
-      PUSH_DATA (push, (h << 16) | y);
+          BEGIN_NVC0(push, NVC0_3D(VIEWPORT_HORIZ(i)), 2);
+          PUSH_DATA (push, (w << 16) | x);
+          PUSH_DATA (push, (h << 16) | y);
 
-      zmin = vp->translate[2] - fabsf(vp->scale[2]);
-      zmax = vp->translate[2] + fabsf(vp->scale[2]);
+          zmin = vp->translate[2] - fabsf(vp->scale[2]);
+          zmax = vp->translate[2] + fabsf(vp->scale[2]);
 
-      BEGIN_NVC0(push, NVC0_3D(DEPTH_RANGE_NEAR(i)), 2);
-      PUSH_DATAf(push, zmin);
-      PUSH_DATAf(push, zmax);
+          BEGIN_NVC0(push, NVC0_3D(DEPTH_RANGE_NEAR(i)), 2);
+          PUSH_DATAf(push, zmin);
+          PUSH_DATAf(push, zmax);
+      } else {
+          BEGIN_NVC0(push, NVC0_3D(VIEWPORT_HORIZ(i)), 4);
+          PUSH_DATA (push, 0xffff0000);
+          PUSH_DATA (push, 0xffff0000);
+          PUSH_DATAf(push, 0.0f); /* DEPTH_RANGE_NEAR */
+          PUSH_DATAf(push, 1.0f); /* DEPTH_RANGE_FAR */
+      }
    }
    nvc0->viewports_dirty = 0;
 }
diff --git a/src/gallium/drivers/nouveau/nvc0/nvc0_surface.c b/src/gallium/drivers/nouveau/nvc0/nvc0_surface.c
index 5dc9c8a..95ebddb 100644
--- a/src/gallium/drivers/nouveau/nvc0/nvc0_surface.c
+++ b/src/gallium/drivers/nouveau/nvc0/nvc0_surface.c
@@ -1199,7 +1199,8 @@ nvc0_blit_3d(struct nvc0_context *nvc0, const struct pipe_blit_info *info)
    nvc0_blitctx_post_blit(blit);
 
    /* restore viewport transform */
-   IMMED_NVC0(push, NVC0_3D(VIEWPORT_TRANSFORM_EN), 1);
+   if (!nvc0->state.vport_bypass)
+       IMMED_NVC0(push, NVC0_3D(VIEWPORT_TRANSFORM_EN), 1);
 }
 
 static void
-- 
2.1.3

